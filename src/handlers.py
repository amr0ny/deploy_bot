import asyncio
import logging

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from sqlalchemy.ext.asyncio.session import AsyncSession
from repository.publication_slot import PublicationSlotRepository

from src import facts as fct
from src.config import AppConfig
from src.provider.factories import TaskBrowserFactory
from src.provider.manager import AsyncProviderManager
from src.queues.factories import TaskFactory, TaskType
from src.queues.interfaces import AsyncQueue
from src.utils import extract_tiktok_links

router = Router()
logger = logging.getLogger()


@router.message(Command("add_slot"))
async def cmd_add_slot(
    message: Message, db_session: AsyncSession, command: CommandObject
):
    try:
        day, time_str, type_str = command.args.split()
        valid_days = [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
        ]
        valid_types = ["short_fact", "medium_fact", "video"]

        if day.lower() not in valid_days:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–î–Ω–∏: monday, tuesday, ..., sunday"
            )
            return

        if type_str.lower() not in valid_types:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–¢–∏–ø—ã: short_fact, medium_fact, video"
            )
            return

        await PublicationSlotRepository.add_publication_slot(
            db_session, day.lower(), time_str, type_str.lower()
        )
        await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {day} {time_str} {type_str}")
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /add_slot monday 12:00 short_fact"
        )


@router.message(Command("clear_slots"))
async def cmd_clear_slots(message: Message, db_session: AsyncSession):
    await PublicationSlotRepository.clear_slots(db_session)
    await message.answer("‚úÖ –í—Å–µ —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω—ã.")


@router.message(Command("slots"))
async def cmd_show_slots(message: Message, db_session: AsyncSession):
    weekdays = [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
    ]
    response = ""
    for day in weekdays:
        slots = await PublicationSlotRepository.get_slots_for_day(db_session, day)
        if slots:
            response += f"üìÖ {day.capitalize()}\n"
            for s in sorted(slots, key=lambda x: x.time):
                response += f"üïí {s.time} ‚Äî {s.content_type}\n"
            response += "\n"
    if not response:
        response = "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."
    await message.answer(response)


@router.message(Command("video_mode_start"))
async def cmd_video_mode_start(message: Message, queue: AsyncQueue):
    await queue.set_flag(True)
    await message.answer(
        "üé• –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –í–ö–õ–Æ–ß–ï–ù. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥—å."
    )


@router.message(Command("video_mode_stop"))
async def cmd_video_mode_stop(message: Message, queue: AsyncQueue):
    await queue.set_flag(False)
    await message.answer("üõë –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –û–¢–ö–õ–Æ–ß–ï–ù. –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")


@router.message(Command("video_remaining"))
async def cmd_video_remaining(message: Message, queue: AsyncQueue):
    count = await queue.size()
    await message.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å {count} –≤–∏–¥–µ–æ.")


@router.message(Command("remaining"))
async def cmd_remaining(message: Message):
    facts = fct.count_remaining_facts()
    await message.answer(
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–∫—Ç–æ–≤:\n"
        f"‚Äî –ö–æ—Ä–æ—Ç–∫–∏—Ö: {facts['short']}\n"
        f"‚Äî –°—Ä–µ–¥–Ω–∏—Ö: {facts['medium']}"
    )


@router.message(Command("test_post"))
async def cmd_test_post(
    message: Message,
    queue: AsyncQueue,
    manager: AsyncProviderManager,
    task_browser_factory: TaskBrowserFactory,
    config: AppConfig
):
    try:
        task = await queue.get(timeout=10)
    except asyncio.TimeoutError:
        await message.answer("–í–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    short = fct.get_next_short_fact(False)
    medium = fct.get_next_medium_fact(False)
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª...")
    if short:
        await message.bot.send_message(config.channel_id, f"[test] {short}")
    if medium:
        await message.bot.send_message(config.channel_id, f"[test] {medium}")

    await task.execute(message.bot, manager, task_browser_factory, config.channel_id)


@router.message(Command("upload"))
async def cmd_upload(message: Message):
    if not message.document or not message.document.file_name.endswith(".txt"):
        await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å —Ñ–∞–∫—Ç–∞–º–∏.")
        return

    if message.document.file_name not in ("medium_facts.txt", "short_facts.txt"):
        await message.answer(
            '‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "medium_facts.txt" –∏–ª–∏ "short_facts.txt".'
        )
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    await fct.upload_file(
        message.bot, message.document.file_id, message.document.file_name
    )
    await message.answer(f"‚úÖ –§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–º–µ–Ω—ë–Ω.")


@router.message(Command("video_clear"))
async def cmd_video_clear(message: Message, queue: AsyncQueue):
    await queue.clear()
    await message.answer("üóë –û—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")


@router.message()
async def handle_video_submission(
    message: Message, queue: AsyncQueue, task_factory: TaskFactory
):
    if not await queue.get_flag():
        return

    tiktok_links = []
    caption = message.caption or ""

    if caption:
        tiktok_links = extract_tiktok_links(caption)

    if not tiktok_links and message.text:
        tiktok_links = extract_tiktok_links(message.text)

    if not tiktok_links:
        await message.answer(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ TikTok —Å—Å—ã–ª–∫—É.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ https://tiktok.com/@user/video/123456789\n"
            "‚Ä¢ https://vm.tiktok.com/ABCD1234/\n"
            "‚Ä¢ https://vt.tiktok.com/XYZ9876/"
        )
    for link in tiktok_links:
        try:
            await queue.put(
                task_factory.create(TaskType.LINK, url=link, caption=caption)
            )
            logger.info(f"TikTok link added to queue: {link}")

        except Exception as e:
            logger.error(f"Failed to add TikTok task: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ TikTok —Å—Å—ã–ª–∫–∏.")

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tiktok_links)} TikTok —Å—Å—ã–ª–æ–∫ –≤ –æ—á–µ—Ä–µ–¥—å.")
