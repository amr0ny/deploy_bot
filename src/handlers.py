import asyncio
import logging
import random
from typing import Tuple

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from sqlalchemy.ext.asyncio.session import AsyncSession
from repository.publication_slot import PublicationSlotRepository

from src import facts as fct
from src.config import AppConfig
from src.models import FactType
from src.provider.factories import AsyncTaskFactory
from src.provider.manager import AsyncBrowserProviderManager, AsyncProviderManager
from src.provider.providers import AsyncYtDlpProvider
from src.queues.factories import TaskFactory, TaskType
from src.queues.interfaces import AsyncQueue
from src.repository.facts import FactRepository
from src.repository.proxy import ProxyRepository
from src.utils import extract_tiktok_links, parse_proxy

router = Router()
logger = logging.getLogger()


@router.message(Command("add_slot"))
async def cmd_add_slot(
    message: Message, db_session: AsyncSession, command: CommandObject
):
    try:
        day, time_str, type_str = command.args.split()
        valid_days = [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
        ]
        valid_types = ["short_fact", "medium_fact", "video"]

        if day.lower() not in valid_days:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–î–Ω–∏: monday, tuesday, ..., sunday"
            )
            return

        if type_str.lower() not in valid_types:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–¢–∏–ø—ã: short_fact, medium_fact, video"
            )
            return

        await PublicationSlotRepository.add_publication_slot(
            db_session, day.lower(), time_str, type_str.lower()
        )
        await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {day} {time_str} {type_str}")
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /add_slot monday 12:00 short_fact"
        )


@router.message(Command("clear_slots"))
async def cmd_clear_slots(message: Message, db_session: AsyncSession):
    await PublicationSlotRepository.clear_slots(db_session)
    await message.answer("‚úÖ –í—Å–µ —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω—ã.")


@router.message(Command("slots"))
async def cmd_show_slots(message: Message, db_session: AsyncSession):
    weekdays = [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
    ]
    response = ""
    for day in weekdays:
        slots = await PublicationSlotRepository.get_slots_for_day(db_session, day)
        if slots:
            response += f"üìÖ {day.capitalize()}\n"
            for s in sorted(slots, key=lambda x: x.time):
                response += f"üïí {s.time} ‚Äî {s.content_type}\n"
            response += "\n"
    if not response:
        response = "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."
    await message.answer(response)


@router.message(Command("video_mode_start"))
async def cmd_video_mode_start(message: Message, queue: AsyncQueue):
    await queue.set_flag(True)
    await message.answer(
        "üé• –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –í–ö–õ–Æ–ß–ï–ù. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥—å."
    )


@router.message(Command("video_mode_stop"))
async def cmd_video_mode_stop(message: Message, queue: AsyncQueue):
    await queue.set_flag(False)
    await message.answer("üõë –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –û–¢–ö–õ–Æ–ß–ï–ù. –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")


@router.message(Command("remaining_video_count"))
async def cmd_video_remaining(message: Message, queue: AsyncQueue):
    count = await queue.size()
    await message.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å {count} –≤–∏–¥–µ–æ.")


@router.message(Command("remaining_facts_count"))
async def cmd_remaining_facts_count(message: Message, fact_repository: FactRepository):
    short_facts_count = await fact_repository.get_facts_count(FactType.SHORT)
    medium_facts_count = await fact_repository.get_facts_count(FactType.MEDIUM)
    await message.answer(
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–∫—Ç–æ–≤:\n"
        f"‚Äî –ö–æ—Ä–æ—Ç–∫–∏—Ö: {short_facts_count}\n"
        f"‚Äî –°—Ä–µ–¥–Ω–∏—Ö: {medium_facts_count}"
    )

@router.message(Command("remove_all_facts"))
async def cmd_remove_all_facts(message: Message, fact_repository: FactRepository):
    command_parts = message.caption.split()
    if len(command_parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upload short –∏–ª–∏ /upload medium")
        return

    fact_type = command_parts[1].lower()
    if fact_type not in ("short", "medium"):
        await message.answer("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: short –∏–ª–∏ medium")
        return


    await fact_repository.remove_all_facts(FactType(fact_type))
    await message.answer("–§–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

@router.message(Command("test_post"))
async def cmd_test_post(
    message: Message,
    queue: AsyncQueue,
    manager: AsyncProviderManager,
    task_browser_factory: AsyncTaskFactory,
    task_factory: TaskFactory,
    fact_repository: FactRepository,
    config: AppConfig,
):
    try:
        task_dict = await queue.get(timeout=10)
        task = task_factory.create(TaskType.LINK, url=task_dict.get("url"))
    except asyncio.TimeoutError:
        await message.answer("–í–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    short = await fact_repository.get_next_fact(FactType.SHORT)
    medium = await fact_repository.get_next_fact(FactType.MEDIUM)
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª...")
    if short:
        await message.bot.send_message(config.channel_id, f"[test] {short}")
    if medium:
        await message.bot.send_message(config.channel_id, f"[test] {medium}")

    await task.execute(message.bot, manager, task_browser_factory, config.channel_id)


@router.message(Command("upload"))
async def cmd_upload(message: Message, fact_repository: FactRepository):
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /upload short –∏–ª–∏ /upload medium
    command_parts = message.caption.split()
    if len(command_parts) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upload short –∏–ª–∏ /upload medium")
        return

    fact_type = command_parts[1].lower()
    if fact_type not in ("short", "medium"):
        await message.answer("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: short –∏–ª–∏ medium")
        return
    fact_type = FactType(fact_type)
    if not message.document or not message.document.file_name.endswith(".txt"):
        await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å —Ñ–∞–∫—Ç–∞–º–∏.")
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        text = file_content.read().decode('utf-8')
        facts = [line.strip() for line in text.split('\n') if line.strip()]

        if not facts:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–∫—Ç–æ–≤.")
            return

        await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(facts)} —Ñ–∞–∫—Ç–æ–≤...")

        batch_size = 100
        for i in range(0, len(facts), batch_size):
            batch = facts[i:i + batch_size]
            await fact_repository.add_facts_batch(batch, fact_type)

            if i + batch_size < len(facts):
                await message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(facts))}/{len(facts)} —Ñ–∞–∫—Ç–æ–≤...")

        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(facts)} {fact_type} —Ñ–∞–∫—Ç–æ–≤ –≤ –±–∞–∑—É!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


@router.message(Command("video_clear"))
async def cmd_video_clear(message: Message, queue: AsyncQueue):
    await queue.clear()
    await message.answer("üóë –û—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")


@router.message(Command("add_proxy"))
async def add_proxy(message: Message, proxy_repository: ProxyRepository):
    try:
        proxy_str = message.caption or message.text or ""
        if proxy_str.startswith("/add_proxy"):
            proxy_str = proxy_str[len("/add_proxy"):].strip()  # —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É

        server, username, password = parse_proxy(proxy_str)

        if not server:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏.\n–ü—Ä–∏–º–µ—Ä: http://user:pass@host:port"
            )
            return

        await proxy_repository.add_proxy(server, username, password)
        await message.answer(f"–ü—Ä–æ–∫—Å–∏ {server} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")


@router.message(Command("remove_proxy"))
async def remove_proxy(message: Message, proxy_repository: ProxyRepository):
    try:
        msg = message.caption or message.text or ""

        if msg.startswith("/remove_proxy"):
            proxy_id_str = msg[len("/remove_proxy"):].strip()

        if proxy_id_str.isdigit():
            proxy_id = int(proxy_id_str)
        else:
            await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ (ID –ø—Ä–æ–∫—Å–∏)")
            return
        await proxy_repository.remove_proxy(proxy_id)

        await message.answer(f"–ü—Ä–æ–∫—Å–∏ c id {proxy_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")


@router.message(Command("remove_all_proxies"))
async def remove_all_proxies(message: Message, proxy_repository: ProxyRepository):
    try:
        await proxy_repository.remove_all_proxies()
        await message.answer("–í—Å–µ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")

@router.message(Command("proxy_list"))
async def proxy_list(message: Message, proxy_repository: ProxyRepository):
    try:
        res = ""
        proxy_list = await proxy_repository.get_proxies()
        if len(proxy_list) <= 0:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç")
            return
        for proxy in proxy_list:
            res += str(proxy) + "\n"

        await message.answer(res)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")


@router.message()
async def handle_video_submission(
    message: Message, queue: AsyncQueue
):
    if not await queue.get_flag():
        return

    tiktok_links = []
    caption = message.caption or ""

    if caption:
        tiktok_links = extract_tiktok_links(caption)

    if not tiktok_links and message.text:
        tiktok_links = extract_tiktok_links(message.text)

    if not tiktok_links:
        await message.answer(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ TikTok —Å—Å—ã–ª–∫—É.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ https://tiktok.com/@user/video/123456789\n"
            "‚Ä¢ https://vm.tiktok.com/ABCD1234/\n"
            "‚Ä¢ https://vt.tiktok.com/XYZ9876/"
        )

    links = list(tiktok_links)
    random.shuffle(links)

    for link in tiktok_links:
        try:
            await queue.put(
                {"url": link}
            )
            logger.info(f"TikTok link added to queue: {link}")

        except Exception as e:
            logger.error(f"Failed to add TikTok task: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ TikTok —Å—Å—ã–ª–∫–∏.")

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tiktok_links)} TikTok —Å—Å—ã–ª–æ–∫ –≤ –æ—á–µ—Ä–µ–¥—å.")
