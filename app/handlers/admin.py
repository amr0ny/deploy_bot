import logging
import os

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from ..db import requests
from ..services import facts as fct
from ..services import video_queue

router = Router()
logger = logging.getLogger()


@router.message(Command("add_slot"))
async def cmd_add_slot(message: Message, command: CommandObject):
    try:
        day, time_str, type_str = command.args.split()
        valid_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        valid_types = ['short_fact', 'medium_fact', 'video']

        if day.lower() not in valid_days:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–î–Ω–∏: monday, tuesday, ..., sunday"
            )
            return

        if type_str.lower() not in valid_types:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä:\n"
                "/add_slot monday 12:00 short_fact\n"
                "–¢–∏–ø—ã: short_fact, medium_fact, video"
            )
            return

        await requests.add_publication_slot(day.lower(), time_str, type_str.lower())
        await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {day} {time_str} {type_str}")
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /add_slot monday 12:00 short_fact"
        )


@router.message(Command("clear_slots"))
async def cmd_clear_slots(message: Message):
    await requests.clear_slots()
    await message.answer("‚úÖ –í—Å–µ —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω—ã.")


@router.message(Command("slots"))
async def cmd_show_slots(message: Message):
    weekdays = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    response = ""
    for day in weekdays:
        slots = await requests.get_slots_for_day(day)
        if slots:
            response += f"üìÖ {day.capitalize()}\n"
            for s in sorted(slots, key=lambda x: x.time):
                response += f"üïí {s.time} ‚Äî {s.content_type}\n"
            response += "\n"
    if not response:
        response = "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."
    await message.answer(response)


@router.message(Command('video_mode_start'))
async def cmd_video_mode_start(message: Message):
    video_queue.enable_video_mode()
    await message.answer("üé• –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –í–ö–õ–Æ–ß–ï–ù. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥—å.")


@router.message(Command('video_mode_stop'))
async def cmd_video_mode_stop(message: Message):
    video_queue.disable_video_mode()
    await message.answer("üõë –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –≤–∏–¥–µ–æ –û–¢–ö–õ–Æ–ß–ï–ù. –í–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")


@router.message(Command('video_remaining'))
async def cmd_video_remaining(message: Message):
    count = video_queue.count_videos()
    await message.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å {count} –≤–∏–¥–µ–æ.")


@router.message(Command("remaining"))
async def cmd_remaining(message: Message):
    facts = fct.count_remaining_facts()
    await message.answer(
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–∫—Ç–æ–≤:\n"
        f"‚Äî –ö–æ—Ä–æ—Ç–∫–∏—Ö: {facts['short']}\n"
        f"‚Äî –°—Ä–µ–¥–Ω–∏—Ö: {facts['medium']}"
    )


@router.message(Command("test_post"))
async def cmd_test_post(message: Message):
    short = fct.get_next_short_fact(False)
    medium = fct.get_next_medium_fact(False)
    video = video_queue.pop_next_video()

    if not short and not medium and not video:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –∏ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª...")

    if short:
        await message.bot.send_message(os.getenv("CHANNEL_ID"), f"[test] {short}")
    if medium:
        await message.bot.send_message(os.getenv("CHANNEL_ID"), f"[test] {medium}")
    if video:
        await message.bot.send_video(os.getenv("CHANNEL_ID"), video["file_id"], caption=f"[test] {video['caption']}")


@router.message(Command("upload"))
async def cmd_upload(message: Message):
    if not message.document or not message.document.file_name.endswith('.txt'):
        await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å —Ñ–∞–∫—Ç–∞–º–∏.")
        return



    if message.document.file_name not in ('medium_facts.txt', 'short_facts.txt'):
        await message.answer('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "medium_facts.txt" –∏–ª–∏ "short_facts.txt".')
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    await fct.upload_file(message.bot, message.document.file_id, message.document.file_name)
    await message.answer(f"‚úÖ –§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–º–µ–Ω—ë–Ω.")


@router.message(Command("video_clear"))
async def cmd_video_clear(message: Message):
    video_queue.clear_video_queue()
    await message.answer("üóë –û—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")


@router.message()
async def handle_video_submission(message: Message):
    if not video_queue.is_video_mode():
        return

    if message.video and message.caption:
        video_queue.add_video(message.video.file_id, message.caption)
        await message.answer("‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")
